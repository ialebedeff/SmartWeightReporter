@using Entities;
@using ReactiveUI.Blazor;
@using ReactiveUI;
@using System.Reactive;

@inherits ReactiveInjectableComponentBase<FilterViewModel>;

@if (ViewModel is not null)
{
    <MudPaper Elevation="0" Style="padding: 10px;" Class="flex-wrap">
        <MudStack Row="true" Class="flex-wrap">
            @if (ViewModel.UserFactories is null)
            {
                <MudSkeleton Width="200" SkeletonType="SkeletonType.Rectangle" Animation="Animation.Pulse"/>
            }
            else
            {
                <MudSelect Label="Производство" Variant="Variant.Outlined" SelectedValues="ViewModel.SelectedFactories" T="Factory" ToStringFunc="(factory => factory.Title)">
                    @foreach (var factory in ViewModel.UserFactories)
                    {
                        <MudSelectItem T="Factory" Value="factory"/>
                    }
                </MudSelect>
            }
            <MudTextField Label="Номер машины" Variant="Variant.Outlined" T="string" @bind-Text="ViewModel.Filter.CarNumber"></MudTextField>
            <MudDatePicker Label="Дата начала" Variant="Variant.Outlined" @bind-Date="ViewModel.Filter.From"></MudDatePicker>
            <MudDatePicker Label="Дата завершения" Variant="Variant.Outlined" @bind-Date="ViewModel.Filter.To"></MudDatePicker>
            <MudTextField Label="Материал" Variant="Variant.Outlined" T="string" @bind-Text="ViewModel.Filter.Material"></MudTextField>
            <MudTextField Label="Грузоотправитель" Variant="Variant.Outlined" T="string" @bind-Text="ViewModel.Filter.Shipper"></MudTextField>
            <MudTextField Label="Грузополучатель" Variant="Variant.Outlined" T="string" @bind-Text="ViewModel.Filter.Contragent"></MudTextField>
        </MudStack>
        <MudStack Class="flex-wrap" AlignItems="AlignItems.End" Style="margin-top: 10px; margin-bottom: 10px;">
            <MudStack Row="true">
                <MudButton Variant="Variant.Filled" @bind-Command="ViewModel.ClearFilterCommand" Color="Color.Primary" DisableElevation="true" DisableRipple="true">
                    <MudText Style="font-weight: 500;">Очистить</MudText>
                </MudButton>
                <MudButton Variant="Variant.Filled" @bind-Command="ViewModel.ReloadFilterCommand" Color="Color.Primary" DisableElevation="true" DisableRipple="true">
                    <MudText Style="font-weight: 500;">Применить</MudText>
                </MudButton>
            </MudStack>
        </MudStack>
    </MudPaper>
}

@code {
    [Parameter]
    public ReactiveCommand<Unit, Unit> ReloadDataByFilterCommand
    {
        get => ViewModel.ReloadFilterCommand;
        set => ViewModel.ReloadFilterCommand = value;
    }

    protected override void OnInitialized()
    {
        this.ViewModel.Activator?.Activate();
        base.OnInitialized();
    }
    protected override void Dispose(bool disposing)
    {
        this.ViewModel.Activator?.Deactivate();
        base.Dispose(disposing);
    }
}