@using Microsoft.AspNetCore.Components.Authorization;

@inherits LayoutComponentBase
@inject AuthenticationStateProvider AuthState;
@inject NavigationManager Navigation;

<MudThemeProvider Theme="Theme" IsDarkMode="false" />
<MudDialogProvider />
<MudSnackbarProvider />

@if (IsAuthenticated)
{
    <MudLayout>
        <MudContainer Style="margin-top: 20px;" MaxWidth="MaxWidth.Large">
            @Body
        </MudContainer>
    </MudLayout>
}

@code {
    public MudTheme Theme { get; set; } = new()
        {
            PaletteDark = new PaletteDark()
            {
                Primary = "#192641",
                Background = "#1D2026",
                TextPrimary = "#FEFEFE"
            },
            Palette = new Palette()
            {
                TextPrimary = "#576064",
                Primary = "#4265ED",
                Background = "#F5F9FC"
            }
        };

    public bool IsAuthenticated { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await AuthState.GetAuthenticationStateAsync()
           .ContinueWith(task =>
           {
               if (task.IsFaulted) Navigation.NavigateTo("/login");
               if (task.IsCompletedSuccessfully &&
                   task.Result is not null &&
                   task.Result.User.Identity?.IsAuthenticated is true &&
                  (task.Result.User.IsInRole("User") &&
                  !task.Result.User.IsInRole("Admin")))
               {
                   // Ставим флаг, чтобы страница отрендерилась
                   IsAuthenticated = true;
                   InvokeAsync(StateHasChanged);
                   // Если пользователь авторизован, то пропускаем
                   // Иначе редиректим его на /login
               }
               else { Navigation.NavigateTo("/login"); }
           });
    }
}